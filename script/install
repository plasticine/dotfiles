#!/bin/bash
set -euo pipefail

DOTFILES_ROOT="${HOME}/.dotfiles"

info() {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user() {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success() {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail() {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ""
  exit
}

newline() {
  echo ""
}

link_files() {
  ln -s $1 $2
  success "Linked $1 to $2"
}

install_dotfiles() {
  local arg="${1:-}"
  local overwrite_all=false
  local backup_all=false
  local skip_all=false

  info "Installing dotfiles..."

  case "${arg}" in
    "--force" )
      backup_all=true;;
    * )
      ;;
  esac

  for source in $(find $DOTFILES_ROOT -maxdepth 5 -name \*.symlink)
  do
    dest="$HOME/.$(basename \"${source%.*}\")"

    if [[ -f $dest || -d $dest ]]
    then
      overwrite=false
      backup=false
      skip=false

      if [[ "$overwrite_all" == "false" && "$backup_all" == "false" && "$skip_all" == "false" ]]
      then
        user "File already exists: $(basename $source), what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [[ "$overwrite" == "true" || "$overwrite_all" == "true" ]]
      then
        rm -rf $dest
        success "Removed $dest"
      fi

      if [[ "$backup" == "true" || "$backup_all" == "true" ]]
      then
        mv $dest $dest\.backup
        success "Moved $dest to $dest.backup"
      fi

      if [[ "$skip" == "false" && "$skip_all" == "false" ]]
      then
        link_files $source $dest
      else
        success "Skipped $source"
      fi

    else
      link_files $source $dest
    fi
  done

  newline && newline
  echo "  All installed!" && newline
}

ensure_dotfiles_link() {
  # Conditionally configure the install of the dotfiles to $HOME/.dotfiles
  if [[ $(pwd) != $DOTFILES_ROOT ]]; then
    # Check that a link exists and is not busted...
    if [[ ! -L ${DOTFILES_ROOT} || ! -e ${DOTFILES_ROOT} ]]; then
      link_files "$(pwd)" "${DOTFILES_ROOT}"
    else
      info "Dotfiles already linked to ${DOTFILES_ROOT}" && newline
    fi
  fi
}

main() {
  newline
  ensure_dotfiles_link
  install_dotfiles "$@"
}

main
